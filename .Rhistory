tar_visnetwork(targets_only = T)
tar_make()
tar_visnetwork(targets_only = T)
tar_make()
setwd("C:/Users/287658c/projects/air-health-sws-r-targets-technique-tweaking-tinkering/example_from_targets")
use_targets()
tar_make()
tar_load(data)
if(file.exists("example_02_a_simple_targets_pipeline")) setwd("example_02_a_simple_targets_pipeline") ## check if we are in the sub-folder, and move if not
library(targets)
if(!file.exists("figures_and_tables")) dir.create("figures_and_tables")
sapply(dir("R/", pattern = ".R$", full.names = T), source)
tar_visnetwork(targets_only = T)
tar_make()
tar_visnetwork(targets_only = T)
tar_make()
tar_visnetwork(targets_only = T)
# Load packages required to define the pipeline:
library(targets)
# Set target options:
tar_option_set(
packages = c("tibble") # Packages that your targets need for their tasks.
# format = "qs", # Optionally set the default storage format. qs is fast.
#
# Pipelines that take a long time to run may benefit from
# optional distributed computing. To use this capability
# in tar_make(), supply a {crew} controller
# as discussed at https://books.ropensci.org/targets/crew.html.
# Choose a controller that suits your needs. For example, the following
# sets a controller that scales up to a maximum of two workers
# which run as local R processes. Each worker launches when there is work
# to do and exits if 60 seconds pass with no tasks to run.
#
#   controller = crew::crew_controller_local(workers = 2, seconds_idle = 60)
#
# Alternatively, if you want workers to run on a high-performance computing
# cluster, select a controller from the {crew.cluster} package.
# For the cloud, see plugin packages like {crew.aws.batch}.
# The following example is a controller for Sun Grid Engine (SGE).
#
#   controller = crew.cluster::crew_controller_sge(
#     # Number of workers that the pipeline can scale up to:
#     workers = 10,
#     # It is recommended to set an idle time so workers can shut themselves
#     # down if they are not running tasks.
#     seconds_idle = 120,
#     # Many clusters install R as an environment module, and you can load it
#     # with the script_lines argument. To select a specific verison of R,
#     # you may need to include a version string, e.g. "module load R/4.3.2".
#     # Check with your system administrator if you are unsure.
#     script_lines = "module load R"
#   )
#
# Set other options as needed.
)
# Run the R scripts in the R/ folder with your custom functions:
tar_source()
# Replace the target list below with your own:
list(
tar_target(
name = data,
command = do_data()
# format = "qs" # Efficient storage for general data objects.
),
tar_target(
name = model,
command = coefficients(lm(y ~ x, data = data))
)
# ,
# tar_target(
#   model2,
#   command(data, model_type = "glm")
#
# )
)
tar_make()
